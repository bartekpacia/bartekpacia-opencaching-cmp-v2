require 'base64'

ENV['FASTLANE_HIDE_TIMESTAMP'] = 'true'
skip_docs

platform :ios do
  ENV['MATCH_GIT_BASIC_AUTHORIZATION'] = Base64.strict_encode64(
    "#{ENV.fetch('GITHUB_USERNAME')}:#{ENV.fetch('GITHUB_PAT')}"
  )

  app_store_connect_api_key(
    key_id: ENV.fetch('APP_STORE_CONNECT_KEY_ID'),
    issuer_id: ENV.fetch('APP_STORE_CONNECT_ISSUER_ID'),
    key_filepath: ENV.fetch('APP_STORE_CONNECT_P8_KEY_PATH'),
    in_house: false
  )

  build_number = get_new_build_number(
    bundle_identifier: ENV.fetch('APP_BUNDLE_ID'),
    package_name: ENV.fetch('APP_PACKAGE_NAME'),
    google_play_json_key_path: ENV.fetch('GOOGLE_PLAY_JSON_KEY_PATH'),
  ).to_s

  # build_name = get_new_build_name
  build_name = "1.0.0"

  desc 'Nuke all certificates and provisioning profiles'
  lane :nukeall do
    match_nuke(
      type: 'development',
      skip_confirmation: true,
    )

    match_nuke(
      type: 'adhoc',
      skip_confirmation: true,
    )

    match_nuke(
      type: 'appstore',
      skip_confirmation: true,
    )
  end

  desc 'Upload a new build to Firebase App Distribution'
  lane :tst do
    project_root = Dir.chdir('../..') { Dir.pwd }

    setup_ci if is_ci

    sync_code_signing(
      type: 'appstore',
      readonly: false,
      force_for_new_devices: true
    )

    UI.message("Building iOS app, project_root: #{project_root}, pwd: #{Dir.pwd}")

    project_path = File.join(project_root, 'iosApp/iosApp.xcodeproj')

    app_bundle_id = ENV.fetch('APP_BUNDLE_ID')
    provisioning_profile_name = "match AppStore #{app_bundle_id}"
    update_code_signing_settings(
      targets: 'iosApp',
      profile_name: provisioning_profile_name,
      # build_configurations: 'Release',
      build_configurations: 'iosApp',
      code_sign_identity: 'Apple Distribution',
      path: project_path
    )

    # export_options = create_export_options_plist(
    #   bundle_id: app_bundle_id,
    #   provisioning_profile: provisioning_profile_name,
    #   method: 'ad-hoc'
    # )
    # export_options_file = File.join(project_root, 'ExportOptions.plist')
    # File.write(export_options_file, export_options)
    
    increment_build_number(
      build_number: build_number,
      xcodeproj: project_path
    )

    increment_version_number(
      version_number: build_name,
      xcodeproj: project_path
    )

    build_app(
      project: project_path,
      scheme: "iosApp",
      export_method: "app-store",
      output_directory: File.join(project_root, 'iosApp/build'),
      output_name: "opencaching.ipa"
    )

    # sh(
    #   step_name: 'flutter build ipa',
    #   command: 'flutter build ipa  ' \
    #            '--no-version-check  ' \
    #            "--build-number #{build_number}  " \
    #            "--build-name #{build_name}  " \
    #            "--export-options-plist #{export_options_file}"
    # )

    upload_to_testflight(
      ipa: File.join(project_root, 'iosApp/build/opencaching.ipa')
    )
  end

  desc 'Push a new release build to App Store'
  lane :prod do
    project_root = Dir.chdir('../..') { Dir.pwd }

    setup_ci if is_ci

    sync_code_signing(
      type: 'appstore',
      readonly: false
    )

    app_bundle_id = ENV.fetch('APP_BUNDLE_ID')
    provisioning_profile_name = "match AppStore #{app_bundle_id}"
    update_code_signing_settings(
      targets: 'Runner',
      profile_name: provisioning_profile_name,
      build_configurations: 'Release',
      code_sign_identity: 'Apple Distribution'
    )

    export_options = create_export_options_plist(
      bundle_id: app_bundle_id,
      provisioning_profile: provisioning_profile_name,
      method: 'app-store'
    )
    export_options_file = File.join(project_root, 'ExportOptions.plist')
    File.write(export_options_file, export_options)

    sh(
      step_name: 'flutter build ipa',
      command: 'flutter build ipa ' \
               '--no-version-check ' \
               "--build-number #{build_number} " \
               "--build-name #{build_name} " \
               "--export-options-plist #{export_options_file}"
    )

    upload_to_app_store(
      ipa: File.join(project_root, 'build/ios/ipa/Runner.ipa'),
      force: true,
      precheck_include_in_app_purchases: false,
      skip_screenshots: true,
      skip_metadata: true
    )
  end
end
